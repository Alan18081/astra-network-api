scalar Date

type Message {
    _id: ID!
    text: String!
    user: User!
    createdAt: Date!
}

type MessageInfo {
    _id: ID!
    chatId: ID!
}

type Query {
    messages(chatId: ID!, skip: Int, limit: Int): [Message!]!
}

type Mutation {
    sendMessage(input: AddMessageInput!): Message!
    editMessage(id: ID!, input: MessageInput!): Message!
    deleteMessage(id: ID!): MessageInfo!
}

type Subscription {
    messageAdded(chatId: ID!): Message!
    messageEdited(chatId: ID!): Message!
    messageRemoved(chatId: ID!): MessageInfo!
}

input AddMessageInput {
    text: String!
    chatId: ID!
}

input MessageInput {
    text: String!
}